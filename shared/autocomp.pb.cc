// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autocomp.proto

#include "autocomp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autocomplete {
PROTOBUF_CONSTEXPR InferenceRequest::InferenceRequest(
    ::_pbi::ConstantInitialized)
  : input_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct InferenceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InferenceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InferenceRequestDefaultTypeInternal() {}
  union {
    InferenceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
PROTOBUF_CONSTEXPR InferenceResponse::InferenceResponse(
    ::_pbi::ConstantInitialized)
  : output_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct InferenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InferenceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InferenceResponseDefaultTypeInternal() {}
  union {
    InferenceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InferenceResponseDefaultTypeInternal _InferenceResponse_default_instance_;
}  // namespace autocomplete
static ::_pb::Metadata file_level_metadata_autocomp_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_autocomp_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_autocomp_2eproto = nullptr;

const uint32_t TableStruct_autocomp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autocomplete::InferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autocomplete::InferenceRequest, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autocomplete::InferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autocomplete::InferenceResponse, output_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autocomplete::InferenceRequest)},
  { 7, -1, -1, sizeof(::autocomplete::InferenceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::autocomplete::_InferenceRequest_default_instance_._instance,
  &::autocomplete::_InferenceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_autocomp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016autocomp.proto\022\014autocomplete\"!\n\020Infere"
  "nceRequest\022\r\n\005input\030\001 \001(\t\"#\n\021InferenceRe"
  "sponse\022\016\n\006output\030\001 \001(\t2\\\n\014AutoComplete\022L"
  "\n\tFetchNext\022\036.autocomplete.InferenceRequ"
  "est\032\037.autocomplete.InferenceResponseb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_autocomp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_autocomp_2eproto = {
    false, false, 204, descriptor_table_protodef_autocomp_2eproto,
    "autocomp.proto",
    &descriptor_table_autocomp_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_autocomp_2eproto::offsets,
    file_level_metadata_autocomp_2eproto, file_level_enum_descriptors_autocomp_2eproto,
    file_level_service_descriptors_autocomp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_autocomp_2eproto_getter() {
  return &descriptor_table_autocomp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_autocomp_2eproto(&descriptor_table_autocomp_2eproto);
namespace autocomplete {

// ===================================================================

class InferenceRequest::_Internal {
 public:
};

InferenceRequest::InferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autocomplete.InferenceRequest)
}
InferenceRequest::InferenceRequest(const InferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    input_.Set(from._internal_input(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autocomplete.InferenceRequest)
}

inline void InferenceRequest::SharedCtor() {
input_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InferenceRequest::~InferenceRequest() {
  // @@protoc_insertion_point(destructor:autocomplete.InferenceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_.Destroy();
}

void InferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autocomplete.InferenceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "autocomplete.InferenceRequest.input"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autocomplete.InferenceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autocomplete.InferenceRequest.input");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autocomplete.InferenceRequest)
  return target;
}

size_t InferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autocomplete.InferenceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferenceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceRequest::GetClassData() const { return &_class_data_; }

void InferenceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferenceRequest *>(to)->MergeFrom(
      static_cast<const InferenceRequest &>(from));
}


void InferenceRequest::MergeFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autocomplete.InferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input().empty()) {
    _internal_set_input(from._internal_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceRequest::CopyFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autocomplete.InferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceRequest::IsInitialized() const {
  return true;
}

void InferenceRequest::InternalSwap(InferenceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &input_, lhs_arena,
      &other->input_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_autocomp_2eproto_getter, &descriptor_table_autocomp_2eproto_once,
      file_level_metadata_autocomp_2eproto[0]);
}

// ===================================================================

class InferenceResponse::_Internal {
 public:
};

InferenceResponse::InferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autocomplete.InferenceResponse)
}
InferenceResponse::InferenceResponse(const InferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    output_.Set(from._internal_output(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autocomplete.InferenceResponse)
}

inline void InferenceResponse::SharedCtor() {
output_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InferenceResponse::~InferenceResponse() {
  // @@protoc_insertion_point(destructor:autocomplete.InferenceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  output_.Destroy();
}

void InferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:autocomplete.InferenceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "autocomplete.InferenceResponse.output"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autocomplete.InferenceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string output = 1;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autocomplete.InferenceResponse.output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autocomplete.InferenceResponse)
  return target;
}

size_t InferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autocomplete.InferenceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceResponse::GetClassData() const { return &_class_data_; }

void InferenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferenceResponse *>(to)->MergeFrom(
      static_cast<const InferenceResponse &>(from));
}


void InferenceResponse::MergeFrom(const InferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autocomplete.InferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _internal_set_output(from._internal_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceResponse::CopyFrom(const InferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autocomplete.InferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceResponse::IsInitialized() const {
  return true;
}

void InferenceResponse::InternalSwap(InferenceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &output_, lhs_arena,
      &other->output_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_autocomp_2eproto_getter, &descriptor_table_autocomp_2eproto_once,
      file_level_metadata_autocomp_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace autocomplete
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autocomplete::InferenceRequest*
Arena::CreateMaybeMessage< ::autocomplete::InferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autocomplete::InferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::autocomplete::InferenceResponse*
Arena::CreateMaybeMessage< ::autocomplete::InferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autocomplete::InferenceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
